--======= SERVIços E VARIÁVEIS GLOBAIS =======--
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local MarketplaceService = game:GetService("MarketplaceService")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui")

--======= FUNÇÃO DE ANÁLISE "INTELIGENTE" =======--

local function analyzeGame()
    local info = {} -- Usaremos uma tabela para construir a string de forma eficiente

    local function add(text)
        table.insert(info, text)
    end

    add("--- [ ANÁLISE DO JOGO INICIADA ] ---")
    add("Data da Análise (UTC): " .. os.date("!*t").day .. "/" .. os.date("!*t").month .. "/" .. os.date("!*t").year)
    add("")

    -- Seção 1: Informações Gerais do Jogo
    add("--- 1. INFORMAÇÕES GERAIS ---")
    local success, result = pcall(function() return MarketplaceService:GetProductInfo(game.PlaceId) end)
    if success and result then
        add("Nome do Jogo: " .. result.Name)
    end
    add("Place ID: " .. tostring(game.PlaceId))
    add("Game ID (Universe ID): " .. tostring(game.GameId))
    add("")

    -- Seção 2: Estrutura do Workspace
    add("--- 2. ESTRUTURA DO WORKSPACE (Pastas Principais) ---")
    for _, child in ipairs(workspace:GetChildren()) do
        if not child:IsA("Terrain") and not child:IsA("Camera") and #child:GetChildren() > 0 then -- Apenas mostra itens que contêm outros itens (como pastas)
            add("- " .. child.Name .. " (" .. child.ClassName .. ")")
        end
    end
    add("")

    -- Seção 3: Personagem do Jogador
    add("--- 3. PERSONAGEM DO JOGADOR ("..localPlayer.Name..") ---")
    local character = localPlayer.Character
    if character then
        for _, child in ipairs(character:GetChildren()) do
            add("- " .. child.Name .. " (" .. child.ClassName .. ")")
        end
    else
        add("Personagem não encontrado.")
    end
    add("")
    
    -- Seção 4: Mochila (Backpack)
    add("--- 4. ITENS NA MOCHILA ---")
    local backpack = localPlayer:FindFirstChild("Backpack")
    if backpack then
        local items = backpack:GetChildren()
        if #items > 0 then
            for _, item in ipairs(items) do
                add("- " .. item.Name .. " (" .. item.ClassName .. ")")
            end
        else
            add("Nenhum item na mochila.")
        end
    else
        add("Mochila não encontrada.")
    end
    add("")

    -- Seção 5: ReplicatedStorage (Eventos, Módulos, etc.)
    add("--- 5. REPLICATEDSTORAGE ---")
    for _, child in ipairs(ReplicatedStorage:GetChildren()) do
        add("- " .. child.Name .. " (" .. child.ClassName .. ")")
    end
    add("")

    -- Seção 6: Configurações de Iluminação
    add("--- 6. CONFIGURAÇÕES DE ILUMINAÇÃO (LIGHTING) ---")
    add("Ambient: " .. tostring(Lighting.Ambient))
    add("OutdoorAmbient: " .. tostring(Lighting.OutdoorAmbient))
    add("Brightness: " .. tostring(Lighting.Brightness))
    add("FogEnd: " .. tostring(Lighting.FogEnd))
    add("FogStart: " .. tostring(Lighting.FogStart))
    add("FogColor: " .. tostring(Lighting.FogColor))
    add("")
    
    add("--- [ ANÁLISE CONCLUÍDA ] ---")

    return table.concat(info, "\n")
end


--======= CRIAÇÃO DA INTERFACE (GUI) =======--
local function createAnalyzerPanel()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "GameAnalyzerGUI"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    -- **[CORREÇÃO PRINCIPAL] Adiciona a GUI à tela do jogador.**
    screenGui.Parent = playerGui

    local mainPanel = Instance.new("Frame"); mainPanel.Size = UDim2.new(0, 450, 0, 500); mainPanel.Position = UDim2.new(0.5, 0, 0.5, 0); mainPanel.AnchorPoint = Vector2.new(0.5, 0.5); mainPanel.BackgroundColor3 = Color3.fromRGB(30, 32, 40); mainPanel.Parent = screenGui;
    Instance.new("UICorner", mainPanel).CornerRadius = UDim.new(0, 8);
    Instance.new("UIStroke", mainPanel).Color = Color3.fromRGB(100, 100, 120);

    local header = Instance.new("Frame"); header.Name = "Header"; header.Size = UDim2.new(1, 0, 0, 35); header.BackgroundColor3 = Color3.fromRGB(40, 42, 50); header.Parent = mainPanel;
    local title = Instance.new("TextLabel"); title.Size = UDim2.new(1, 0, 1, 0); title.Text = "Analisador de Jogo"; title.Font = Enum.Font.SourceSansBold; title.TextSize = 16; title.TextColor3 = Color3.fromRGB(220, 220, 220); title.BackgroundTransparency = 1; title.Parent = header;

    local resultFrame = Instance.new("ScrollingFrame"); resultFrame.Size = UDim2.new(1, -20, 1, -90); resultFrame.Position = UDim2.new(0.5, 0, 0, 45); resultFrame.AnchorPoint = Vector2.new(0.5, 0); resultFrame.BackgroundColor3 = Color3.fromRGB(20, 22, 28); resultFrame.BorderSizePixel = 0; resultFrame.ScrollBarThickness = 6; resultFrame.Parent = mainPanel;
    Instance.new("UICorner", resultFrame).CornerRadius = UDim.new(0, 6);
    
    local resultLabel = Instance.new("TextLabel"); resultLabel.Size = UDim2.new(1, -10, 0, 0); resultLabel.AutomaticSize = Enum.AutomaticSize.Y; resultLabel.Text = "Clique em 'Analisar' para começar..."; resultLabel.Font = Enum.Font.Code; resultLabel.TextSize = 14; resultLabel.TextColor3 = Color3.fromRGB(200, 200, 200); resultLabel.BackgroundTransparency = 1; resultLabel.TextXAlignment = Enum.TextXAlignment.Left; resultLabel.TextYAlignment = Enum.TextYAlignment.Top; resultLabel.Parent = resultFrame;
    Instance.new("UIPadding", resultLabel).Padding = UDim.new(0, 5);

    local buttonFrame = Instance.new("Frame"); buttonFrame.Size = UDim2.new(1, -20, 0, 35); buttonFrame.Position = UDim2.new(0.5, 0, 1, -10); buttonFrame.AnchorPoint = Vector2.new(0.5, 1); buttonFrame.BackgroundTransparency = 1; buttonFrame.Parent = mainPanel;
    local buttonLayout = Instance.new("UIListLayout"); buttonLayout.FillDirection = Enum.FillDirection.Horizontal; buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; buttonLayout.VerticalAlignment = Enum.VerticalAlignment.Center; buttonLayout.Padding = UDim.new(0, 10); buttonLayout.Parent = buttonFrame;
    
    local analyzeButton = Instance.new("TextButton"); analyzeButton.Name = "AnalyzeButton"; analyzeButton.Size = UDim2.new(0.5, -5, 1, 0); analyzeButton.Text = "Analisar Jogo"; analyzeButton.Font = Enum.Font.SourceSansBold; analyzeButton.TextSize = 14; analyzeButton.BackgroundColor3 = Color3.fromRGB(80, 80, 200); analyzeButton.TextColor3 = Color3.fromRGB(255, 255, 255); analyzeButton.Parent = buttonFrame; Instance.new("UICorner", analyzeButton).CornerRadius = UDim.new(0, 6);
    local copyButton = Instance.new("TextButton"); copyButton.Name = "CopyButton"; copyButton.Size = UDim2.new(0.5, -5, 1, 0); copyButton.Text = "Copiar"; copyButton.Font = Enum.Font.SourceSansBold; copyButton.TextSize = 14; copyButton.TextColor3 = Color3.fromRGB(255, 255, 255); copyButton.Parent = buttonFrame; Instance.new("UICorner", copyButton).CornerRadius = UDim.new(0, 6);
    
    -- **[MELHORIA] Começa desativado**
    copyButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80);
    copyButton.AutoButtonColor = false
    local analysisDone = false

    -- Funcionalidades
    analyzeButton.MouseButton1Click:Connect(function()
        analyzeButton.Text = "Analisando..."
        resultLabel.Text = "Analisando, por favor aguarde..."
        task.wait(0.2) -- Dá tempo para a UI atualizar
        
        local analysisResult = analyzeGame()
        resultLabel.Text = analysisResult
        resultFrame.CanvasPosition = Vector2.new(0, 0)
        
        -- **[MELHORIA] Ativa o botão de copiar**
        analysisDone = true
        copyButton.BackgroundColor3 = Color3.fromRGB(80, 180, 80)
        copyButton.AutoButtonColor = true
        analyzeButton.Text = "Analisar Novamente"
    end)

    copyButton.MouseButton1Click:Connect(function()
        if not analysisDone then return end -- Não faz nada se a análise não foi feita

        if setclipboard then
            setclipboard(resultLabel.Text)
            copyButton.Text = "Copiado!"
            task.wait(2)
            copyButton.Text = "Copiar"
        else
            copyButton.Text = "Erro ao copiar!"
            task.wait(2)
            copyButton.Text = "Copiar"
        end
    end)

    local function makeDraggable(trigger, target) local dragging, dragStart, startPos; trigger.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then dragging, dragStart, startPos = true, input.Position, target.Position; local conn; conn = input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then dragging = false; conn:Disconnect() end end) end end); UserInputService.InputChanged:Connect(function(input) if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then local delta = input.Position - dragStart; target.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y) end end) end
    makeDraggable(header, mainPanel)
end

-- Iniciar
createAnalyzerPanel()