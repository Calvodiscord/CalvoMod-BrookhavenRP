--======= SERVIÇOS E VARIÁVEIS GLOBAIS =======--
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local MarketplaceService = game:GetService("MarketplaceService")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui")

-- Palavra-chave para ativar a análise
local TRIGGER_COMMAND = "analisar"

--======= FUNÇÃO DE ANÁLISE "INTELIGENTE" =======--

local function analyzeGame()
    local info = {}

    local function add(text)
        table.insert(info, text)
    end

    add("--- [ ANÁLISE DO JOGO INICIADA ] ---")
    add("Data da Análise (UTC): " .. os.date("!*t").day .. "/" .. os.date("!*t").month .. "/" .. os.date("!*t").year)
    add("")

    -- 1. Informações Gerais
    add("--- 1. INFORMAÇÕES GERAIS ---")
    local success, result = pcall(function() return MarketplaceService:GetProductInfo(game.PlaceId) end)
    if success and result then
        add("Nome do Jogo: " .. result.Name)
    end
    add("Place ID: " .. tostring(game.PlaceId))
    add("Game ID (Universe ID): " .. tostring(game.GameId))
    add("")

    -- 2. Workspace
    add("--- 2. ESTRUTURA DO WORKSPACE (Pastas Principais) ---")
    for _, child in ipairs(workspace:GetChildren()) do
        if not child:IsA("Terrain") and not child:IsA("Camera") and #child:GetChildren() > 0 then
            add("- " .. child.Name .. " (" .. child.ClassName .. ")")
        end
    end
    add("")

    -- 3. Personagem
    add("--- 3. PERSONAGEM DO JOGADOR ("..localPlayer.Name..") ---")
    local character = localPlayer.Character
    if character then
        for _, child in ipairs(character:GetChildren()) do
            add("- " .. child.Name .. " (" .. child.ClassName .. ")")
        end
    else
        add("Personagem não encontrado.")
    end
    add("")
    
    -- 4. Mochila
    add("--- 4. ITENS NA MOCHILA ---")
    local backpack = localPlayer:FindFirstChild("Backpack")
    if backpack then
        local items = backpack:GetChildren()
        if #items > 0 then
            for _, item in ipairs(items) do
                add("- " .. item.Name .. " (" .. item.ClassName .. ")")
            end
        else
            add("Nenhum item na mochila.")
        end
    else
        add("Mochila não encontrada.")
    end
    add("")

    -- 5. ReplicatedStorage
    add("--- 5. REPLICATEDSTORAGE ---")
    for _, child in ipairs(ReplicatedStorage:GetChildren()) do
        add("- " .. child.Name .. " (" .. child.ClassName .. ")")
    end
    add("")

    -- 6. Iluminação
    add("--- 6. CONFIGURAÇÕES DE ILUMINAÇÃO (LIGHTING) ---")
    add("Ambient: " .. tostring(Lighting.Ambient))
    add("OutdoorAmbient: " .. tostring(Lighting.OutdoorAmbient))
    add("Brightness: " .. tostring(Lighting.Brightness))
    add("FogEnd: " .. tostring(Lighting.FogEnd))
    add("FogStart: " .. tostring(Lighting.FogStart))
    add("FogColor: " .. tostring(Lighting.FogColor))
    add("")
    
    add("--- [ ANÁLISE CONCLUÍDA ] ---")

    return table.concat(info, "\n")
end

--======= LÓGICA DE NOTIFICAÇÃO E ATIVAÇÃO =======--

local function showNotification(message)
    -- Cria uma ScreenGui temporária para a notificação
    local notificationGui = Instance.new("ScreenGui")
    notificationGui.Name = "AnalyzerNotification"
    notificationGui.ResetOnSpawn = false
    notificationGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    notificationGui.Parent = playerGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 300, 0, 50)
    label.Position = UDim2.new(0.5, 0, 0, -100) -- Começa fora da tela
    label.AnchorPoint = Vector2.new(0.5, 0)
    label.BackgroundColor3 = Color3.fromRGB(30, 32, 40)
    label.Font = Enum.Font.SourceSansBold
    label.Text = message
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 16
    label.Parent = notificationGui
    Instance.new("UICorner", label).CornerRadius = UDim.new(0, 8)
    Instance.new("UIStroke", label).Color = Color3.fromRGB(80, 180, 80)

    -- Animação
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local tweenIn = game:GetService("TweenService"):Create(label, tweenInfo, {Position = UDim2.new(0.5, 0, 0, 20)})
    local tweenOut = game:GetService("TweenService"):Create(label, tweenInfo, {Position = UDim2.new(0.5, 0, 0, -100)})

    tweenIn:Play()
    task.wait(3) -- A notificação fica visível por 3 segundos
    tweenOut:Play()

    -- Limpeza
    tweenOut.Completed:Wait()
    notificationGui:Destroy()
end

-- Escuta por novas mensagens no chat
localPlayer.Chatted:Connect(function(message, recipient)
    -- Verifica se a mensagem é o comando (convertido para minúsculas)
    if message:lower() == TRIGGER_COMMAND then
        
        -- Tenta apagar a mensagem do chat (requer certas permissões do executor)
        pcall(function()
            local chatService = require(game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("ChatServiceRunner"))
            local speaker = chatService:GetSpeaker(localPlayer.Name)
            speaker:SayMessage("", "All", true) -- Envia uma mensagem vazia para "sobrescrever" a anterior
        end)
        
        -- Executa a análise
        local analysisResult = analyzeGame()
        
        -- Copia para a área de transferência
        if setclipboard then
            setclipboard(analysisResult)
            showNotification("Análise do Jogo Concluída e Copiada!")
        else
            showNotification("ERRO: 'setclipboard' não é suportado pelo seu executor.")
        end
    end
end)

-- Mensagem de confirmação no console do executor
print("Analisador de Jogo por Chat ativado. Digite '" .. TRIGGER_COMMAND .. "' no chat para usar.")